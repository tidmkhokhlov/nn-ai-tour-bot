import re

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message,
    ReplyKeyboardRemove,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)

from src.bot.states.main_states import MainForm
from src.llm import request_to_llm
from src.bot.utils.check_correct import is_valid_time, is_valid_location
from src.bot.utils.correction import correction_location
from src.bot.utils.json_loader import get_phrase
import src.bot.keyboards.user_keyboards as ukb

router = Router()


# /start
@router.message(CommandStart())
async def start_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        get_phrase("START", "FIRST_FEEL"),
        reply_markup=ukb.main_keyboard
    )
    await state.set_state(MainForm.INTERESTS)


# –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
@router.message(F.text == "–ü–æ–º–æ–≥–∏ –ø–∂ —Å –¥–æ–Ω–∞—à–∫–æ–π..")
async def start_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        get_phrase("START", "NEW_START"),
        reply_markup=ukb.main_keyboard
    )
    await state.set_state(MainForm.INTERESTS)


# –®–∞–≥ 1 ‚Äî –∏–Ω—Ç–µ—Ä–µ—Å—ã
@router.message(MainForm.INTERESTS)
async def process_interests(message: Message, state: FSMContext):
    await state.update_data(interests=message.text)
    await message.answer(
        f"–í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {message.text}",
        reply_markup=ukb.interests_accept_keyboard()
    )


@router.callback_query(F.data == "accept_interests")
async def accept_interests(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup()
    await callback.message.answer(get_phrase("FORM", "TIME"))
    await state.set_state(MainForm.TIME)


@router.callback_query(F.data == "add_interests")
async def add_interests(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –µ—â—ë –∏–Ω—Ç–µ—Ä–µ—Å—ã:")
    await state.set_state(MainForm.ADD_INTERESTS)


@router.message(MainForm.ADD_INTERESTS)
async def process_add_interests(message: Message, state: FSMContext):
    data = await state.get_data()
    old_interests = data.get("interests", "")

    if old_interests:
        new_interests = f"{old_interests}, {message.text}"
    else:
        new_interests = message.text

    await state.update_data(interests=new_interests)
    await message.answer(
        f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {new_interests}",
        reply_markup=ukb.interests_accept_keyboard()
    )


@router.callback_query(F.data == "delete_interests")
async def delete_interests(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∑–∞–Ω–æ–≤–æ:")
    await state.update_data(interests="")
    await state.set_state(MainForm.INTERESTS)


# –®–∞–≥ 2 ‚Äî –≤—Ä–µ–º—è
@router.message(MainForm.TIME)
async def process_time(message: Message, state: FSMContext):
    if not is_valid_time(message.text):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è")
        return

    await state.update_data(time=message.text)

    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è: {message.text}\n–¢–æ—á–Ω–æ?",
        reply_markup=ukb.time_accept_keyboard()
    )


@router.callback_query(F.data == "accept_time")
async def accept_time(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup()
    await callback.message.answer(
        get_phrase("FORM", "LOCATION"),
        reply_markup=ukb.location_keyboard
    )
    await state.set_state(MainForm.LOCATION)


@router.callback_query(F.data == "change_time")
async def change_time(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ:")


# –®–∞–≥ 3 ‚Äî –ª–æ–∫–∞—Ü–∏—è (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞)
@router.message(MainForm.LOCATION, F.location)
async def process_location_geo(message: Message, state: FSMContext):
    loc = message.location
    coords = f"{loc.latitude}, {loc.longitude}"
    await state.update_data(location=coords)

    await message.answer(
        f"–í–∞—à–∞ –ª–æ–∫–∞—Ü–∏—è: {coords}. –í–µ—Ä–Ω–æ?",
        reply_markup=ukb.location_accept_keyboard()
    )


@router.message(MainForm.LOCATION)
async def process_location_text(message: Message, state: FSMContext):
    if not await is_valid_location(message.text):
        await message.answer("üòï –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å")
        return

    from src.yandex_api import get_coordinates, get_address
    coords = await get_coordinates(correction_location(message.text))
    address = await get_address(coords[0], coords[1])

    await state.update_data(location=f"{coords[0]}, {coords[1]}")

    await message.answer(
        f"–í–∞—à–∞ –ª–æ–∫–∞—Ü–∏—è: {address}. –í–µ—Ä–Ω–æ?",
        reply_markup=ukb.location_accept_keyboard()
    )


@router.callback_query(F.data == "accept_location")
async def accept_location(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup()
    data = await state.get_data()
    await send_summary(callback.message, data, state)


@router.callback_query(F.data == "change_location")
async def change_location(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup()
    await state.update_data(location="")
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ:")


# –ò—Ç–æ–≥ - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –º–∞—Ä—à—Ä—É—Ç–æ–º
async def send_summary(message: Message, data: dict, state: FSMContext):
    interests = data.get("interests")
    time = data.get("time")
    location = data.get("location")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
    await message.answer("üîÑ –°–æ–∑–¥–∞—é –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç...")

    # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –æ—Ç –ò–ò
    response = await request_to_llm(data)

    if not response["success"]:
        await message.answer(
            f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n"
            f"‚ú® –ò–Ω—Ç–µ—Ä–µ—Å—ã: {interests}\n"
            f"‚è∞ –í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É: {time} —á–∞—Å–æ–≤\n"
            f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location}\n\n"
            f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=ukb.main_keyboard
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–ª–∞–π–Ω–æ–º
    timeline_text = "üéØ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç:\n\n"

    for item in response["timeline"]:
        timeline_text += f"‚è∞ {item['time']} - *{item['place']}*\n"
        timeline_text += f"   _{item['description']}_ ({item['duration']})\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    timeline_text += f"üìã –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
    timeline_text += f"‚ú® –ò–Ω—Ç–µ—Ä–µ—Å—ã: {interests}\n"
    timeline_text += f"‚è∞ –í—Ä–µ–º—è: {time} —á–∞—Å–æ–≤\n"
    timeline_text += f"üìç –õ–æ–∫–∞—Ü–∏—è: {location}\n\n"

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üó∫Ô∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ä—à—Ä—É—Ç –Ω–∞ –∫–∞—Ä—Ç–µ", url=response["map_url"])],
            [InlineKeyboardButton(text="üîÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç", callback_data="new_route")]
        ]
    )

    await message.answer(
        timeline_text,
        parse_mode="Markdown",
        reply_markup=keyboard
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
@router.callback_query(F.data == "new_route")
async def new_route_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup()
    await callback.message.answer("–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã:")
    await state.set_state(MainForm.INTERESTS)